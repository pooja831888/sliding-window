class Solution {
    public int numberOfSubarrays(int[] nums, int k) {
        return atMostK(nums, k) - atMostK(nums, k - 1);

        
    }

     private int atMostK(int[] nums, int k) {
        int count = 0;
        int left = 0;
        int oddCount = 0;
        
        for (int right = 0; right < nums.length; right++) {
            // If the current number is odd, increase the odd count
            if (nums[right] % 2 != 0) {
                oddCount++;
            }
            
            // Shrink the window if the odd count exceeds 'k'
            while (oddCount > k) {
                if (nums[left] % 2 != 0) {
                    oddCount--;
                }
                left++;
            }
            
            // Count the number of valid subarrays ending at the current position
            count += (right - left + 1);
        }
        
        return count;
     }
}
